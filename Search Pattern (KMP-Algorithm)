Search Pattern (KMP-Algorithm)
================================

vector <int> search(string pat, string txt)
        {
            //code here
            vector<int> v1;
            int i=0;
            int j=0;
            int k=0;
            // cout<<<<endl;
            while(i<txt.length()){
                if((j-i)==(pat.size())){
                    // cout<<"hi"<<" ";
                    v1.push_back(i+1);
                    i=i+1;
                    j=i;
                    k=0;
                }
                if(pat[k]==txt[j]){
                    j+=1;
                    k+=1;
                }
                else{
                    i=i+1;
                    j=i;
                    k=0;
                }
            }
            return v1;
            
        }


872. Leaf-Similar Trees(leetcode)
====================

vector<int> v1;
    vector<int> v2;

    void dfs(TreeNode* root){
        if(root){
            if(root->left==NULL && root->right==NULL){
                v1.push_back(root->val);
                return;
            }
        dfs(root->left);
        dfs(root->right);
        }
        return;
    }

    
    void dfs2(TreeNode* root){
        if(root){
        if(root->left==NULL && root->right==NULL){
            v2.push_back(root->val);
            return;
        }
        dfs2(root->left);
        dfs2(root->right);
        }
    }

    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        dfs(root1);
        dfs2(root2);
        if(v1.size()!=v2.size()){
            return 0;
        }
        for(int i=0;i<v1.size();i++){
            if(v1[i]!=v2[i]){
                return 0;
            }
        }
        return 1;
